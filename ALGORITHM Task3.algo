PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, VAR ps:INTEGER)
VAR
    i,n,m:INTEGER;
BEGIN
    n:=v1.length-1;
    m:=v2.length-1;
    ps:=0;
    IF (n <> m) THEN
        Write("You can't calculate the dot product of 2 vectors have different length")
        ps:=NaN
    END_IF
    FOR i FROM 0 TO n STEP 1  DO
        ps := ps + v1[i] * v2[i]
    END_FOR
END
// v = [[1,2,3],[2,5,0],[1,2,6],[2,8,9]]
ALGORITHM orth_vectors
VAR
    v : ARRAY_OF ARRAY;
    i,j:INTEGER;
BEGIN
    FOR i FROM 0 TO v.length-1 STEP 1  DO
        FOR j FROM i+1 TO v.length-1 STEP 1  DO
            dot_product(v[i],v[j],ps)
            IF (ps = 0 ) THEN
                Write(v[i], " and " , v[j]," are orthogonal")
            END_IF
        END_FOR
    END_FOR
END

//Function
FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i,j,n,m,ps:INTEGER
BEGIN
    n:=v1.length-1;
    m:=v2.length-1;
    ps:=0;
    IF (n <> m) THEN
        Write("You can't calculate the dot product of 2 vectors have different length")
        ps:=NaN
    END_IF
    FOR i FROM 0 TO n STEP 1  DO
        ps := ps + v1[i] * v2[i]
    END_FOR
    RETURN ps ;
END


ALGORITHM orth_vectors
VAR
    v : ARRAY_OF ARRAY;
    i,j,ps:INTEGER;
BEGIN
    FOR i FROM 0 TO v.length-1 STEP 1  DO
        FOR j FROM i+1 TO v.length-1 STEP 1  DO
            ps:=dot_product(v[i],v[j])
            IF (ps = 0 ) THEN
                Write(v[i], " and " , v[j]," are orthogonal")
            END_IF
        END_FOR
    END_FOR
END
